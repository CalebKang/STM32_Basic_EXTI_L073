
STM32_Basic_EXTI_L073.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000dac  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08000e6c  08000e6c  00010e6c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000e88  08000e88  00010e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000e8c  08000e8c  00010e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08000e90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000004  08000e94  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000024  08000e94  00020024  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000367b  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000e8c  00000000  00000000  000236a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ef4  00000000  00000000  00024533  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000338  00000000  00000000  00025428  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000428  00000000  00000000  00025760  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00001afa  00000000  00000000  00025b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000010c5  00000000  00000000  00027682  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00028747  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000006d0  00000000  00000000  000287c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000e54 	.word	0x08000e54

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08000e54 	.word	0x08000e54

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000220:	21fa      	movs	r1, #250	; 0xfa
 8000222:	4b0a      	ldr	r3, [pc, #40]	; (800024c <HAL_InitTick+0x2c>)
{
 8000224:	b570      	push	{r4, r5, r6, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000226:	0089      	lsls	r1, r1, #2
{
 8000228:	0005      	movs	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 800022a:	6818      	ldr	r0, [r3, #0]
 800022c:	f7ff ff6c 	bl	8000108 <__udivsi3>
 8000230:	f000 f87a 	bl	8000328 <HAL_SYSTICK_Config>
 8000234:	0004      	movs	r4, r0
  {
    status = HAL_ERROR;
 8000236:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000238:	2c00      	cmp	r4, #0
 800023a:	d105      	bne.n	8000248 <HAL_InitTick+0x28>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 800023c:	3802      	subs	r0, #2
 800023e:	0022      	movs	r2, r4
 8000240:	0029      	movs	r1, r5
 8000242:	f000 f837 	bl	80002b4 <HAL_NVIC_SetPriority>
 8000246:	0020      	movs	r0, r4
  }

  /* Return function status */
  return status;
}
 8000248:	bd70      	pop	{r4, r5, r6, pc}
 800024a:	46c0      	nop			; (mov r8, r8)
 800024c:	20000000 	.word	0x20000000

08000250 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000250:	2340      	movs	r3, #64	; 0x40
 8000252:	4a08      	ldr	r2, [pc, #32]	; (8000274 <HAL_Init+0x24>)
{
 8000254:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000256:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000258:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800025a:	430b      	orrs	r3, r1
 800025c:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800025e:	f7ff ffdf 	bl	8000220 <HAL_InitTick>
 8000262:	1e04      	subs	r4, r0, #0
 8000264:	d103      	bne.n	800026e <HAL_Init+0x1e>
    HAL_MspInit();
 8000266:	f000 fd55 	bl	8000d14 <HAL_MspInit>
}
 800026a:	0020      	movs	r0, r4
 800026c:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800026e:	2401      	movs	r4, #1
 8000270:	e7fb      	b.n	800026a <HAL_Init+0x1a>
 8000272:	46c0      	nop			; (mov r8, r8)
 8000274:	40022000 	.word	0x40022000

08000278 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000278:	4a02      	ldr	r2, [pc, #8]	; (8000284 <HAL_IncTick+0xc>)
 800027a:	6813      	ldr	r3, [r2, #0]
 800027c:	3301      	adds	r3, #1
 800027e:	6013      	str	r3, [r2, #0]
}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	20000020 	.word	0x20000020

08000288 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000288:	4b01      	ldr	r3, [pc, #4]	; (8000290 <HAL_GetTick+0x8>)
 800028a:	6818      	ldr	r0, [r3, #0]
}
 800028c:	4770      	bx	lr
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	20000020 	.word	0x20000020

08000294 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000294:	b570      	push	{r4, r5, r6, lr}
 8000296:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000298:	f7ff fff6 	bl	8000288 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
    wait++;
 800029c:	1c63      	adds	r3, r4, #1
 800029e:	1e5a      	subs	r2, r3, #1
 80002a0:	4193      	sbcs	r3, r2
  uint32_t tickstart = HAL_GetTick();
 80002a2:	0005      	movs	r5, r0
    wait++;
 80002a4:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80002a6:	f7ff ffef 	bl	8000288 <HAL_GetTick>
 80002aa:	1b40      	subs	r0, r0, r5
 80002ac:	4284      	cmp	r4, r0
 80002ae:	d8fa      	bhi.n	80002a6 <HAL_Delay+0x12>
  {
  }
}
 80002b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080002b4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80002b4:	b570      	push	{r4, r5, r6, lr}
 80002b6:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80002b8:	2800      	cmp	r0, #0
 80002ba:	da14      	bge.n	80002e6 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002bc:	230f      	movs	r3, #15
 80002be:	b2c0      	uxtb	r0, r0
 80002c0:	4003      	ands	r3, r0
 80002c2:	3b08      	subs	r3, #8
 80002c4:	4a11      	ldr	r2, [pc, #68]	; (800030c <HAL_NVIC_SetPriority+0x58>)
 80002c6:	089b      	lsrs	r3, r3, #2
 80002c8:	009b      	lsls	r3, r3, #2
 80002ca:	189b      	adds	r3, r3, r2
 80002cc:	2203      	movs	r2, #3
 80002ce:	4010      	ands	r0, r2
 80002d0:	4090      	lsls	r0, r2
 80002d2:	32fc      	adds	r2, #252	; 0xfc
 80002d4:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002d6:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002d8:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002da:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002dc:	69dc      	ldr	r4, [r3, #28]
 80002de:	43ac      	bics	r4, r5
 80002e0:	4321      	orrs	r1, r4
 80002e2:	61d9      	str	r1, [r3, #28]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80002e4:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002e6:	2503      	movs	r5, #3
 80002e8:	0883      	lsrs	r3, r0, #2
 80002ea:	4028      	ands	r0, r5
 80002ec:	40a8      	lsls	r0, r5
 80002ee:	35fc      	adds	r5, #252	; 0xfc
 80002f0:	002e      	movs	r6, r5
 80002f2:	4a07      	ldr	r2, [pc, #28]	; (8000310 <HAL_NVIC_SetPriority+0x5c>)
 80002f4:	009b      	lsls	r3, r3, #2
 80002f6:	189b      	adds	r3, r3, r2
 80002f8:	22c0      	movs	r2, #192	; 0xc0
 80002fa:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002fc:	4029      	ands	r1, r5
 80002fe:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000300:	0092      	lsls	r2, r2, #2
 8000302:	589c      	ldr	r4, [r3, r2]
 8000304:	43b4      	bics	r4, r6
 8000306:	4321      	orrs	r1, r4
 8000308:	5099      	str	r1, [r3, r2]
 800030a:	e7eb      	b.n	80002e4 <HAL_NVIC_SetPriority+0x30>
 800030c:	e000ed00 	.word	0xe000ed00
 8000310:	e000e100 	.word	0xe000e100

08000314 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000314:	231f      	movs	r3, #31
 8000316:	4018      	ands	r0, r3
 8000318:	3b1e      	subs	r3, #30
 800031a:	4083      	lsls	r3, r0
 800031c:	4a01      	ldr	r2, [pc, #4]	; (8000324 <HAL_NVIC_EnableIRQ+0x10>)
 800031e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000320:	4770      	bx	lr
 8000322:	46c0      	nop			; (mov r8, r8)
 8000324:	e000e100 	.word	0xe000e100

08000328 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000328:	4a09      	ldr	r2, [pc, #36]	; (8000350 <HAL_SYSTICK_Config+0x28>)
 800032a:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 800032c:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800032e:	4293      	cmp	r3, r2
 8000330:	d80d      	bhi.n	800034e <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000332:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000334:	4a07      	ldr	r2, [pc, #28]	; (8000354 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000336:	4808      	ldr	r0, [pc, #32]	; (8000358 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000338:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800033a:	6a03      	ldr	r3, [r0, #32]
 800033c:	0609      	lsls	r1, r1, #24
 800033e:	021b      	lsls	r3, r3, #8
 8000340:	0a1b      	lsrs	r3, r3, #8
 8000342:	430b      	orrs	r3, r1
 8000344:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000346:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000348:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800034a:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800034c:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800034e:	4770      	bx	lr
 8000350:	00ffffff 	.word	0x00ffffff
 8000354:	e000e010 	.word	0xe000e010
 8000358:	e000ed00 	.word	0xe000ed00

0800035c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800035c:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
        
        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800035e:	4a55      	ldr	r2, [pc, #340]	; (80004b4 <HAL_GPIO_Init+0x158>)
  while (((GPIO_Init->Pin) >> position) != 0)
 8000360:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000362:	1882      	adds	r2, r0, r2
 8000364:	1e54      	subs	r4, r2, #1
 8000366:	41a2      	sbcs	r2, r4
{
 8000368:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 800036a:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00U;
 800036c:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800036e:	3205      	adds	r2, #5
 8000370:	9203      	str	r2, [sp, #12]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000372:	9a01      	ldr	r2, [sp, #4]
 8000374:	40da      	lsrs	r2, r3
 8000376:	d101      	bne.n	800037c <HAL_GPIO_Init+0x20>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8000378:	b005      	add	sp, #20
 800037a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800037c:	2501      	movs	r5, #1
 800037e:	409d      	lsls	r5, r3
 8000380:	9a01      	ldr	r2, [sp, #4]
 8000382:	402a      	ands	r2, r5
 8000384:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 8000386:	d100      	bne.n	800038a <HAL_GPIO_Init+0x2e>
 8000388:	e091      	b.n	80004ae <HAL_GPIO_Init+0x152>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800038a:	684a      	ldr	r2, [r1, #4]
 800038c:	4694      	mov	ip, r2
 800038e:	2210      	movs	r2, #16
 8000390:	4664      	mov	r4, ip
 8000392:	4394      	bics	r4, r2
 8000394:	0022      	movs	r2, r4
 8000396:	3c01      	subs	r4, #1
 8000398:	2a02      	cmp	r2, #2
 800039a:	d11f      	bne.n	80003dc <HAL_GPIO_Init+0x80>
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800039c:	2407      	movs	r4, #7
 800039e:	270f      	movs	r7, #15
 80003a0:	401c      	ands	r4, r3
 80003a2:	00a4      	lsls	r4, r4, #2
 80003a4:	40a7      	lsls	r7, r4
        temp = GPIOx->AFR[position >> 3U];
 80003a6:	08da      	lsrs	r2, r3, #3
 80003a8:	0092      	lsls	r2, r2, #2
 80003aa:	1882      	adds	r2, r0, r2
 80003ac:	6a16      	ldr	r6, [r2, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80003ae:	43be      	bics	r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 80003b0:	690f      	ldr	r7, [r1, #16]
 80003b2:	40a7      	lsls	r7, r4
 80003b4:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 80003b6:	6216      	str	r6, [r2, #32]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80003b8:	2403      	movs	r4, #3
 80003ba:	005e      	lsls	r6, r3, #1
 80003bc:	40b4      	lsls	r4, r6
        temp = GPIOx->OSPEEDR;
 80003be:	6882      	ldr	r2, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80003c0:	43a2      	bics	r2, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80003c2:	68cc      	ldr	r4, [r1, #12]
 80003c4:	40b4      	lsls	r4, r6
 80003c6:	4322      	orrs	r2, r4
        GPIOx->OSPEEDR = temp;
 80003c8:	6082      	str	r2, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003ca:	4662      	mov	r2, ip
 80003cc:	06d2      	lsls	r2, r2, #27
 80003ce:	0fd2      	lsrs	r2, r2, #31
 80003d0:	409a      	lsls	r2, r3
        temp= GPIOx->OTYPER;
 80003d2:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80003d4:	43ac      	bics	r4, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003d6:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80003d8:	6042      	str	r2, [r0, #4]
 80003da:	e001      	b.n	80003e0 <HAL_GPIO_Init+0x84>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003dc:	2c01      	cmp	r4, #1
 80003de:	d9eb      	bls.n	80003b8 <HAL_GPIO_Init+0x5c>
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80003e0:	2603      	movs	r6, #3
 80003e2:	0034      	movs	r4, r6
 80003e4:	005d      	lsls	r5, r3, #1
 80003e6:	40ac      	lsls	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003e8:	4662      	mov	r2, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80003ea:	43e4      	mvns	r4, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003ec:	4032      	ands	r2, r6
 80003ee:	40aa      	lsls	r2, r5
      temp = GPIOx->MODER;
 80003f0:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80003f2:	4027      	ands	r7, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003f4:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;
 80003f6:	6002      	str	r2, [r0, #0]
      temp = GPIOx->PUPDR;
 80003f8:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80003fa:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 80003fc:	688a      	ldr	r2, [r1, #8]
 80003fe:	40aa      	lsls	r2, r5
 8000400:	4314      	orrs	r4, r2
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000402:	4662      	mov	r2, ip
      GPIOx->PUPDR = temp;
 8000404:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000406:	00d2      	lsls	r2, r2, #3
 8000408:	d551      	bpl.n	80004ae <HAL_GPIO_Init+0x152>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800040a:	2501      	movs	r5, #1
 800040c:	4c2a      	ldr	r4, [pc, #168]	; (80004b8 <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800040e:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000410:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000412:	432a      	orrs	r2, r5
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000414:	001d      	movs	r5, r3
 8000416:	4035      	ands	r5, r6
 8000418:	00ad      	lsls	r5, r5, #2
 800041a:	40af      	lsls	r7, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800041c:	6362      	str	r2, [r4, #52]	; 0x34
 800041e:	4a27      	ldr	r2, [pc, #156]	; (80004bc <HAL_GPIO_Init+0x160>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8000420:	089c      	lsrs	r4, r3, #2
 8000422:	00a4      	lsls	r4, r4, #2
 8000424:	18a4      	adds	r4, r4, r2
 8000426:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000428:	43ba      	bics	r2, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800042a:	27a0      	movs	r7, #160	; 0xa0
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800042c:	9202      	str	r2, [sp, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800042e:	05ff      	lsls	r7, r7, #23
 8000430:	2200      	movs	r2, #0
 8000432:	42b8      	cmp	r0, r7
 8000434:	d010      	beq.n	8000458 <HAL_GPIO_Init+0xfc>
 8000436:	4f22      	ldr	r7, [pc, #136]	; (80004c0 <HAL_GPIO_Init+0x164>)
 8000438:	3201      	adds	r2, #1
 800043a:	42b8      	cmp	r0, r7
 800043c:	d00c      	beq.n	8000458 <HAL_GPIO_Init+0xfc>
 800043e:	4f21      	ldr	r7, [pc, #132]	; (80004c4 <HAL_GPIO_Init+0x168>)
 8000440:	3201      	adds	r2, #1
 8000442:	42b8      	cmp	r0, r7
 8000444:	d008      	beq.n	8000458 <HAL_GPIO_Init+0xfc>
 8000446:	4f20      	ldr	r7, [pc, #128]	; (80004c8 <HAL_GPIO_Init+0x16c>)
 8000448:	0032      	movs	r2, r6
 800044a:	42b8      	cmp	r0, r7
 800044c:	d004      	beq.n	8000458 <HAL_GPIO_Init+0xfc>
 800044e:	4e1f      	ldr	r6, [pc, #124]	; (80004cc <HAL_GPIO_Init+0x170>)
 8000450:	3201      	adds	r2, #1
 8000452:	42b0      	cmp	r0, r6
 8000454:	d000      	beq.n	8000458 <HAL_GPIO_Init+0xfc>
 8000456:	9a03      	ldr	r2, [sp, #12]
 8000458:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800045a:	4667      	mov	r7, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800045c:	9d02      	ldr	r5, [sp, #8]
 800045e:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000460:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8000462:	4a1b      	ldr	r2, [pc, #108]	; (80004d0 <HAL_GPIO_Init+0x174>)
        temp &= ~((uint32_t)iocurrent);
 8000464:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->IMR;
 8000466:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8000468:	9d00      	ldr	r5, [sp, #0]
        temp &= ~((uint32_t)iocurrent);
 800046a:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 800046c:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800046e:	03ff      	lsls	r7, r7, #15
 8000470:	d401      	bmi.n	8000476 <HAL_GPIO_Init+0x11a>
        temp &= ~((uint32_t)iocurrent);
 8000472:	0035      	movs	r5, r6
 8000474:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000476:	4667      	mov	r7, ip
        EXTI->IMR = temp;
 8000478:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 800047a:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 800047c:	9d00      	ldr	r5, [sp, #0]
 800047e:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000480:	03bf      	lsls	r7, r7, #14
 8000482:	d401      	bmi.n	8000488 <HAL_GPIO_Init+0x12c>
        temp &= ~((uint32_t)iocurrent);
 8000484:	0035      	movs	r5, r6
 8000486:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000488:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 800048a:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 800048c:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 800048e:	9d00      	ldr	r5, [sp, #0]
 8000490:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000492:	02ff      	lsls	r7, r7, #11
 8000494:	d401      	bmi.n	800049a <HAL_GPIO_Init+0x13e>
        temp &= ~((uint32_t)iocurrent);
 8000496:	0035      	movs	r5, r6
 8000498:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800049a:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 800049c:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 800049e:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 80004a0:	9e00      	ldr	r6, [sp, #0]
 80004a2:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004a4:	02bf      	lsls	r7, r7, #10
 80004a6:	d401      	bmi.n	80004ac <HAL_GPIO_Init+0x150>
        temp &= ~((uint32_t)iocurrent);
 80004a8:	4025      	ands	r5, r4
 80004aa:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 80004ac:	60d6      	str	r6, [r2, #12]
    position++;
 80004ae:	3301      	adds	r3, #1
 80004b0:	e75f      	b.n	8000372 <HAL_GPIO_Init+0x16>
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	afffe400 	.word	0xafffe400
 80004b8:	40021000 	.word	0x40021000
 80004bc:	40010000 	.word	0x40010000
 80004c0:	50000400 	.word	0x50000400
 80004c4:	50000800 	.word	0x50000800
 80004c8:	50000c00 	.word	0x50000c00
 80004cc:	50001000 	.word	0x50001000
 80004d0:	40010400 	.word	0x40010400

080004d4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 80004d4:	2a00      	cmp	r2, #0
 80004d6:	d001      	beq.n	80004dc <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 80004d8:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80004da:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 80004dc:	6281      	str	r1, [r0, #40]	; 0x28
}
 80004de:	e7fc      	b.n	80004da <HAL_GPIO_WritePin+0x6>

080004e0 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80004e0:	6943      	ldr	r3, [r0, #20]
 80004e2:	4059      	eors	r1, r3
 80004e4:	6141      	str	r1, [r0, #20]
}
 80004e6:	4770      	bx	lr

080004e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 80004e8:	4b04      	ldr	r3, [pc, #16]	; (80004fc <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 80004ea:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 80004ec:	695a      	ldr	r2, [r3, #20]
 80004ee:	4210      	tst	r0, r2
 80004f0:	d002      	beq.n	80004f8 <HAL_GPIO_EXTI_IRQHandler+0x10>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80004f2:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80004f4:	f000 fb80 	bl	8000bf8 <HAL_GPIO_EXTI_Callback>
  }
}
 80004f8:	bd10      	pop	{r4, pc}
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	40010400 	.word	0x40010400

08000500 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000500:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8000502:	4b18      	ldr	r3, [pc, #96]	; (8000564 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8000504:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8000506:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8000508:	400a      	ands	r2, r1
 800050a:	2a08      	cmp	r2, #8
 800050c:	d026      	beq.n	800055c <HAL_RCC_GetSysClockFreq+0x5c>
 800050e:	2a0c      	cmp	r2, #12
 8000510:	d006      	beq.n	8000520 <HAL_RCC_GetSysClockFreq+0x20>
 8000512:	2a04      	cmp	r2, #4
 8000514:	d11a      	bne.n	800054c <HAL_RCC_GetSysClockFreq+0x4c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	06db      	lsls	r3, r3, #27
 800051a:	d421      	bmi.n	8000560 <HAL_RCC_GetSysClockFreq+0x60>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 800051c:	4812      	ldr	r0, [pc, #72]	; (8000568 <HAL_RCC_GetSysClockFreq+0x68>)
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 800051e:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8000520:	028a      	lsls	r2, r1, #10
 8000522:	4812      	ldr	r0, [pc, #72]	; (800056c <HAL_RCC_GetSysClockFreq+0x6c>)
 8000524:	0f12      	lsrs	r2, r2, #28
 8000526:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000528:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800052a:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800052c:	0f89      	lsrs	r1, r1, #30
 800052e:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000530:	03c0      	lsls	r0, r0, #15
 8000532:	d504      	bpl.n	800053e <HAL_RCC_GetSysClockFreq+0x3e>
        pllvco = (HSE_VALUE * pllm) / plld;
 8000534:	480e      	ldr	r0, [pc, #56]	; (8000570 <HAL_RCC_GetSysClockFreq+0x70>)
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8000536:	4350      	muls	r0, r2
 8000538:	f7ff fde6 	bl	8000108 <__udivsi3>
 800053c:	e7ef      	b.n	800051e <HAL_RCC_GetSysClockFreq+0x1e>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	06db      	lsls	r3, r3, #27
 8000542:	d501      	bpl.n	8000548 <HAL_RCC_GetSysClockFreq+0x48>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8000544:	480b      	ldr	r0, [pc, #44]	; (8000574 <HAL_RCC_GetSysClockFreq+0x74>)
 8000546:	e7f6      	b.n	8000536 <HAL_RCC_GetSysClockFreq+0x36>
         pllvco = (HSI_VALUE * pllm) / plld;
 8000548:	4807      	ldr	r0, [pc, #28]	; (8000568 <HAL_RCC_GetSysClockFreq+0x68>)
 800054a:	e7f4      	b.n	8000536 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800054c:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800054e:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000550:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8000552:	041b      	lsls	r3, r3, #16
 8000554:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000556:	3301      	adds	r3, #1
 8000558:	4098      	lsls	r0, r3
 800055a:	e7e0      	b.n	800051e <HAL_RCC_GetSysClockFreq+0x1e>
      sysclockfreq = HSE_VALUE;
 800055c:	4804      	ldr	r0, [pc, #16]	; (8000570 <HAL_RCC_GetSysClockFreq+0x70>)
 800055e:	e7de      	b.n	800051e <HAL_RCC_GetSysClockFreq+0x1e>
        sysclockfreq =  (HSI_VALUE >> 2);
 8000560:	4804      	ldr	r0, [pc, #16]	; (8000574 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 8000562:	e7dc      	b.n	800051e <HAL_RCC_GetSysClockFreq+0x1e>
 8000564:	40021000 	.word	0x40021000
 8000568:	00f42400 	.word	0x00f42400
 800056c:	08000e7c 	.word	0x08000e7c
 8000570:	007a1200 	.word	0x007a1200
 8000574:	003d0900 	.word	0x003d0900

08000578 <HAL_RCC_OscConfig>:
{
 8000578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800057a:	0005      	movs	r5, r0
 800057c:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 800057e:	2800      	cmp	r0, #0
 8000580:	d102      	bne.n	8000588 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8000582:	2001      	movs	r0, #1
}
 8000584:	b007      	add	sp, #28
 8000586:	bdf0      	pop	{r4, r5, r6, r7, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000588:	230c      	movs	r3, #12
 800058a:	4cc2      	ldr	r4, [pc, #776]	; (8000894 <HAL_RCC_OscConfig+0x31c>)
 800058c:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800058e:	68e2      	ldr	r2, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000590:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000592:	2380      	movs	r3, #128	; 0x80
 8000594:	025b      	lsls	r3, r3, #9
 8000596:	401a      	ands	r2, r3
 8000598:	9201      	str	r2, [sp, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800059a:	6802      	ldr	r2, [r0, #0]
 800059c:	07d2      	lsls	r2, r2, #31
 800059e:	d441      	bmi.n	8000624 <HAL_RCC_OscConfig+0xac>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80005a0:	682b      	ldr	r3, [r5, #0]
 80005a2:	079b      	lsls	r3, r3, #30
 80005a4:	d500      	bpl.n	80005a8 <HAL_RCC_OscConfig+0x30>
 80005a6:	e087      	b.n	80006b8 <HAL_RCC_OscConfig+0x140>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80005a8:	682b      	ldr	r3, [r5, #0]
 80005aa:	06db      	lsls	r3, r3, #27
 80005ac:	d528      	bpl.n	8000600 <HAL_RCC_OscConfig+0x88>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 80005ae:	2e00      	cmp	r6, #0
 80005b0:	d000      	beq.n	80005b4 <HAL_RCC_OscConfig+0x3c>
 80005b2:	e0e1      	b.n	8000778 <HAL_RCC_OscConfig+0x200>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80005b4:	6823      	ldr	r3, [r4, #0]
 80005b6:	059b      	lsls	r3, r3, #22
 80005b8:	d502      	bpl.n	80005c0 <HAL_RCC_OscConfig+0x48>
 80005ba:	69eb      	ldr	r3, [r5, #28]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d0e0      	beq.n	8000582 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80005c0:	6862      	ldr	r2, [r4, #4]
 80005c2:	49b5      	ldr	r1, [pc, #724]	; (8000898 <HAL_RCC_OscConfig+0x320>)
 80005c4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80005c6:	400a      	ands	r2, r1
 80005c8:	431a      	orrs	r2, r3
 80005ca:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80005cc:	6861      	ldr	r1, [r4, #4]
 80005ce:	6a2a      	ldr	r2, [r5, #32]
 80005d0:	0209      	lsls	r1, r1, #8
 80005d2:	0a09      	lsrs	r1, r1, #8
 80005d4:	0612      	lsls	r2, r2, #24
 80005d6:	430a      	orrs	r2, r1
 80005d8:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80005da:	2280      	movs	r2, #128	; 0x80
 80005dc:	0b5b      	lsrs	r3, r3, #13
 80005de:	3301      	adds	r3, #1
 80005e0:	0212      	lsls	r2, r2, #8
 80005e2:	409a      	lsls	r2, r3
 80005e4:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80005e6:	68e1      	ldr	r1, [r4, #12]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80005e8:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80005ea:	060a      	lsls	r2, r1, #24
 80005ec:	49ab      	ldr	r1, [pc, #684]	; (800089c <HAL_RCC_OscConfig+0x324>)
 80005ee:	0f12      	lsrs	r2, r2, #28
 80005f0:	5c8a      	ldrb	r2, [r1, r2]
 80005f2:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80005f4:	4aaa      	ldr	r2, [pc, #680]	; (80008a0 <HAL_RCC_OscConfig+0x328>)
 80005f6:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80005f8:	f7ff fe12 	bl	8000220 <HAL_InitTick>
        if(status != HAL_OK)
 80005fc:	2800      	cmp	r0, #0
 80005fe:	d1c1      	bne.n	8000584 <HAL_RCC_OscConfig+0xc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000600:	682b      	ldr	r3, [r5, #0]
 8000602:	071b      	lsls	r3, r3, #28
 8000604:	d500      	bpl.n	8000608 <HAL_RCC_OscConfig+0x90>
 8000606:	e0ee      	b.n	80007e6 <HAL_RCC_OscConfig+0x26e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000608:	682b      	ldr	r3, [r5, #0]
 800060a:	075b      	lsls	r3, r3, #29
 800060c:	d500      	bpl.n	8000610 <HAL_RCC_OscConfig+0x98>
 800060e:	e110      	b.n	8000832 <HAL_RCC_OscConfig+0x2ba>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000610:	682b      	ldr	r3, [r5, #0]
 8000612:	069b      	lsls	r3, r3, #26
 8000614:	d500      	bpl.n	8000618 <HAL_RCC_OscConfig+0xa0>
 8000616:	e195      	b.n	8000944 <HAL_RCC_OscConfig+0x3cc>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000618:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800061a:	2b00      	cmp	r3, #0
 800061c:	d000      	beq.n	8000620 <HAL_RCC_OscConfig+0xa8>
 800061e:	e1c4      	b.n	80009aa <HAL_RCC_OscConfig+0x432>
  return HAL_OK;
 8000620:	2000      	movs	r0, #0
 8000622:	e7af      	b.n	8000584 <HAL_RCC_OscConfig+0xc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000624:	2e08      	cmp	r6, #8
 8000626:	d004      	beq.n	8000632 <HAL_RCC_OscConfig+0xba>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000628:	2e0c      	cmp	r6, #12
 800062a:	d109      	bne.n	8000640 <HAL_RCC_OscConfig+0xc8>
 800062c:	9a01      	ldr	r2, [sp, #4]
 800062e:	2a00      	cmp	r2, #0
 8000630:	d006      	beq.n	8000640 <HAL_RCC_OscConfig+0xc8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000632:	6823      	ldr	r3, [r4, #0]
 8000634:	039b      	lsls	r3, r3, #14
 8000636:	d5b3      	bpl.n	80005a0 <HAL_RCC_OscConfig+0x28>
 8000638:	686b      	ldr	r3, [r5, #4]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d1b0      	bne.n	80005a0 <HAL_RCC_OscConfig+0x28>
 800063e:	e7a0      	b.n	8000582 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000640:	686a      	ldr	r2, [r5, #4]
 8000642:	429a      	cmp	r2, r3
 8000644:	d111      	bne.n	800066a <HAL_RCC_OscConfig+0xf2>
 8000646:	6822      	ldr	r2, [r4, #0]
 8000648:	4313      	orrs	r3, r2
 800064a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800064c:	f7ff fe1c 	bl	8000288 <HAL_GetTick>
 8000650:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000652:	2280      	movs	r2, #128	; 0x80
 8000654:	6823      	ldr	r3, [r4, #0]
 8000656:	0292      	lsls	r2, r2, #10
 8000658:	4213      	tst	r3, r2
 800065a:	d1a1      	bne.n	80005a0 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800065c:	f7ff fe14 	bl	8000288 <HAL_GetTick>
 8000660:	1bc0      	subs	r0, r0, r7
 8000662:	2864      	cmp	r0, #100	; 0x64
 8000664:	d9f5      	bls.n	8000652 <HAL_RCC_OscConfig+0xda>
            return HAL_TIMEOUT;
 8000666:	2003      	movs	r0, #3
 8000668:	e78c      	b.n	8000584 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800066a:	21a0      	movs	r1, #160	; 0xa0
 800066c:	02c9      	lsls	r1, r1, #11
 800066e:	428a      	cmp	r2, r1
 8000670:	d105      	bne.n	800067e <HAL_RCC_OscConfig+0x106>
 8000672:	2280      	movs	r2, #128	; 0x80
 8000674:	6821      	ldr	r1, [r4, #0]
 8000676:	02d2      	lsls	r2, r2, #11
 8000678:	430a      	orrs	r2, r1
 800067a:	6022      	str	r2, [r4, #0]
 800067c:	e7e3      	b.n	8000646 <HAL_RCC_OscConfig+0xce>
 800067e:	6821      	ldr	r1, [r4, #0]
 8000680:	4888      	ldr	r0, [pc, #544]	; (80008a4 <HAL_RCC_OscConfig+0x32c>)
 8000682:	4001      	ands	r1, r0
 8000684:	6021      	str	r1, [r4, #0]
 8000686:	6821      	ldr	r1, [r4, #0]
 8000688:	400b      	ands	r3, r1
 800068a:	9305      	str	r3, [sp, #20]
 800068c:	9b05      	ldr	r3, [sp, #20]
 800068e:	4986      	ldr	r1, [pc, #536]	; (80008a8 <HAL_RCC_OscConfig+0x330>)
 8000690:	6823      	ldr	r3, [r4, #0]
 8000692:	400b      	ands	r3, r1
 8000694:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000696:	2a00      	cmp	r2, #0
 8000698:	d1d8      	bne.n	800064c <HAL_RCC_OscConfig+0xd4>
        tickstart = HAL_GetTick();
 800069a:	f7ff fdf5 	bl	8000288 <HAL_GetTick>
 800069e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80006a0:	2280      	movs	r2, #128	; 0x80
 80006a2:	6823      	ldr	r3, [r4, #0]
 80006a4:	0292      	lsls	r2, r2, #10
 80006a6:	4213      	tst	r3, r2
 80006a8:	d100      	bne.n	80006ac <HAL_RCC_OscConfig+0x134>
 80006aa:	e779      	b.n	80005a0 <HAL_RCC_OscConfig+0x28>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80006ac:	f7ff fdec 	bl	8000288 <HAL_GetTick>
 80006b0:	1bc0      	subs	r0, r0, r7
 80006b2:	2864      	cmp	r0, #100	; 0x64
 80006b4:	d9f4      	bls.n	80006a0 <HAL_RCC_OscConfig+0x128>
 80006b6:	e7d6      	b.n	8000666 <HAL_RCC_OscConfig+0xee>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80006b8:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 80006ba:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80006bc:	4213      	tst	r3, r2
 80006be:	d003      	beq.n	80006c8 <HAL_RCC_OscConfig+0x150>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80006c0:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 80006c2:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80006c4:	4311      	orrs	r1, r2
 80006c6:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80006c8:	2e04      	cmp	r6, #4
 80006ca:	d004      	beq.n	80006d6 <HAL_RCC_OscConfig+0x15e>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80006cc:	2e0c      	cmp	r6, #12
 80006ce:	d125      	bne.n	800071c <HAL_RCC_OscConfig+0x1a4>
 80006d0:	9a01      	ldr	r2, [sp, #4]
 80006d2:	2a00      	cmp	r2, #0
 80006d4:	d122      	bne.n	800071c <HAL_RCC_OscConfig+0x1a4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80006d6:	6822      	ldr	r2, [r4, #0]
 80006d8:	0752      	lsls	r2, r2, #29
 80006da:	d502      	bpl.n	80006e2 <HAL_RCC_OscConfig+0x16a>
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d100      	bne.n	80006e2 <HAL_RCC_OscConfig+0x16a>
 80006e0:	e74f      	b.n	8000582 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80006e2:	6861      	ldr	r1, [r4, #4]
 80006e4:	692a      	ldr	r2, [r5, #16]
 80006e6:	4871      	ldr	r0, [pc, #452]	; (80008ac <HAL_RCC_OscConfig+0x334>)
 80006e8:	0212      	lsls	r2, r2, #8
 80006ea:	4001      	ands	r1, r0
 80006ec:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80006ee:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80006f0:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80006f2:	6822      	ldr	r2, [r4, #0]
 80006f4:	438a      	bics	r2, r1
 80006f6:	4313      	orrs	r3, r2
 80006f8:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80006fa:	f7ff ff01 	bl	8000500 <HAL_RCC_GetSysClockFreq>
 80006fe:	68e3      	ldr	r3, [r4, #12]
 8000700:	4a66      	ldr	r2, [pc, #408]	; (800089c <HAL_RCC_OscConfig+0x324>)
 8000702:	061b      	lsls	r3, r3, #24
 8000704:	0f1b      	lsrs	r3, r3, #28
 8000706:	5cd3      	ldrb	r3, [r2, r3]
 8000708:	40d8      	lsrs	r0, r3
 800070a:	4b65      	ldr	r3, [pc, #404]	; (80008a0 <HAL_RCC_OscConfig+0x328>)
 800070c:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 800070e:	2000      	movs	r0, #0
 8000710:	f7ff fd86 	bl	8000220 <HAL_InitTick>
      if(status != HAL_OK)
 8000714:	2800      	cmp	r0, #0
 8000716:	d100      	bne.n	800071a <HAL_RCC_OscConfig+0x1a2>
 8000718:	e746      	b.n	80005a8 <HAL_RCC_OscConfig+0x30>
 800071a:	e733      	b.n	8000584 <HAL_RCC_OscConfig+0xc>
      if(hsi_state != RCC_HSI_OFF)
 800071c:	2b00      	cmp	r3, #0
 800071e:	d019      	beq.n	8000754 <HAL_RCC_OscConfig+0x1dc>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000720:	2109      	movs	r1, #9
 8000722:	6822      	ldr	r2, [r4, #0]
 8000724:	438a      	bics	r2, r1
 8000726:	4313      	orrs	r3, r2
 8000728:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800072a:	f7ff fdad 	bl	8000288 <HAL_GetTick>
 800072e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000730:	2204      	movs	r2, #4
 8000732:	6823      	ldr	r3, [r4, #0]
 8000734:	4213      	tst	r3, r2
 8000736:	d007      	beq.n	8000748 <HAL_RCC_OscConfig+0x1d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000738:	6862      	ldr	r2, [r4, #4]
 800073a:	692b      	ldr	r3, [r5, #16]
 800073c:	495b      	ldr	r1, [pc, #364]	; (80008ac <HAL_RCC_OscConfig+0x334>)
 800073e:	021b      	lsls	r3, r3, #8
 8000740:	400a      	ands	r2, r1
 8000742:	4313      	orrs	r3, r2
 8000744:	6063      	str	r3, [r4, #4]
 8000746:	e72f      	b.n	80005a8 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000748:	f7ff fd9e 	bl	8000288 <HAL_GetTick>
 800074c:	1bc0      	subs	r0, r0, r7
 800074e:	2802      	cmp	r0, #2
 8000750:	d9ee      	bls.n	8000730 <HAL_RCC_OscConfig+0x1b8>
 8000752:	e788      	b.n	8000666 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_DISABLE();
 8000754:	2201      	movs	r2, #1
 8000756:	6823      	ldr	r3, [r4, #0]
 8000758:	4393      	bics	r3, r2
 800075a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800075c:	f7ff fd94 	bl	8000288 <HAL_GetTick>
 8000760:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000762:	2204      	movs	r2, #4
 8000764:	6823      	ldr	r3, [r4, #0]
 8000766:	4213      	tst	r3, r2
 8000768:	d100      	bne.n	800076c <HAL_RCC_OscConfig+0x1f4>
 800076a:	e71d      	b.n	80005a8 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800076c:	f7ff fd8c 	bl	8000288 <HAL_GetTick>
 8000770:	1bc0      	subs	r0, r0, r7
 8000772:	2802      	cmp	r0, #2
 8000774:	d9f5      	bls.n	8000762 <HAL_RCC_OscConfig+0x1ea>
 8000776:	e776      	b.n	8000666 <HAL_RCC_OscConfig+0xee>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000778:	69eb      	ldr	r3, [r5, #28]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d020      	beq.n	80007c0 <HAL_RCC_OscConfig+0x248>
        __HAL_RCC_MSI_ENABLE();
 800077e:	2380      	movs	r3, #128	; 0x80
 8000780:	6822      	ldr	r2, [r4, #0]
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	4313      	orrs	r3, r2
 8000786:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000788:	f7ff fd7e 	bl	8000288 <HAL_GetTick>
 800078c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800078e:	2280      	movs	r2, #128	; 0x80
 8000790:	6823      	ldr	r3, [r4, #0]
 8000792:	0092      	lsls	r2, r2, #2
 8000794:	4213      	tst	r3, r2
 8000796:	d00d      	beq.n	80007b4 <HAL_RCC_OscConfig+0x23c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000798:	6863      	ldr	r3, [r4, #4]
 800079a:	4a3f      	ldr	r2, [pc, #252]	; (8000898 <HAL_RCC_OscConfig+0x320>)
 800079c:	4013      	ands	r3, r2
 800079e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80007a0:	4313      	orrs	r3, r2
 80007a2:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80007a4:	6862      	ldr	r2, [r4, #4]
 80007a6:	6a2b      	ldr	r3, [r5, #32]
 80007a8:	0212      	lsls	r2, r2, #8
 80007aa:	061b      	lsls	r3, r3, #24
 80007ac:	0a12      	lsrs	r2, r2, #8
 80007ae:	4313      	orrs	r3, r2
 80007b0:	6063      	str	r3, [r4, #4]
 80007b2:	e725      	b.n	8000600 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80007b4:	f7ff fd68 	bl	8000288 <HAL_GetTick>
 80007b8:	1bc0      	subs	r0, r0, r7
 80007ba:	2802      	cmp	r0, #2
 80007bc:	d9e7      	bls.n	800078e <HAL_RCC_OscConfig+0x216>
 80007be:	e752      	b.n	8000666 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_MSI_DISABLE();
 80007c0:	6823      	ldr	r3, [r4, #0]
 80007c2:	4a3b      	ldr	r2, [pc, #236]	; (80008b0 <HAL_RCC_OscConfig+0x338>)
 80007c4:	4013      	ands	r3, r2
 80007c6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80007c8:	f7ff fd5e 	bl	8000288 <HAL_GetTick>
 80007cc:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80007ce:	2280      	movs	r2, #128	; 0x80
 80007d0:	6823      	ldr	r3, [r4, #0]
 80007d2:	0092      	lsls	r2, r2, #2
 80007d4:	4213      	tst	r3, r2
 80007d6:	d100      	bne.n	80007da <HAL_RCC_OscConfig+0x262>
 80007d8:	e712      	b.n	8000600 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80007da:	f7ff fd55 	bl	8000288 <HAL_GetTick>
 80007de:	1bc0      	subs	r0, r0, r7
 80007e0:	2802      	cmp	r0, #2
 80007e2:	d9f4      	bls.n	80007ce <HAL_RCC_OscConfig+0x256>
 80007e4:	e73f      	b.n	8000666 <HAL_RCC_OscConfig+0xee>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80007e6:	696a      	ldr	r2, [r5, #20]
 80007e8:	2301      	movs	r3, #1
 80007ea:	2a00      	cmp	r2, #0
 80007ec:	d010      	beq.n	8000810 <HAL_RCC_OscConfig+0x298>
      __HAL_RCC_LSI_ENABLE();
 80007ee:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80007f0:	4313      	orrs	r3, r2
 80007f2:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80007f4:	f7ff fd48 	bl	8000288 <HAL_GetTick>
 80007f8:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80007fa:	2202      	movs	r2, #2
 80007fc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80007fe:	4213      	tst	r3, r2
 8000800:	d000      	beq.n	8000804 <HAL_RCC_OscConfig+0x28c>
 8000802:	e701      	b.n	8000608 <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000804:	f7ff fd40 	bl	8000288 <HAL_GetTick>
 8000808:	1bc0      	subs	r0, r0, r7
 800080a:	2802      	cmp	r0, #2
 800080c:	d9f5      	bls.n	80007fa <HAL_RCC_OscConfig+0x282>
 800080e:	e72a      	b.n	8000666 <HAL_RCC_OscConfig+0xee>
      __HAL_RCC_LSI_DISABLE();
 8000810:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000812:	439a      	bics	r2, r3
 8000814:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000816:	f7ff fd37 	bl	8000288 <HAL_GetTick>
 800081a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800081c:	2202      	movs	r2, #2
 800081e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000820:	4213      	tst	r3, r2
 8000822:	d100      	bne.n	8000826 <HAL_RCC_OscConfig+0x2ae>
 8000824:	e6f0      	b.n	8000608 <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000826:	f7ff fd2f 	bl	8000288 <HAL_GetTick>
 800082a:	1bc0      	subs	r0, r0, r7
 800082c:	2802      	cmp	r0, #2
 800082e:	d9f5      	bls.n	800081c <HAL_RCC_OscConfig+0x2a4>
 8000830:	e719      	b.n	8000666 <HAL_RCC_OscConfig+0xee>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000832:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000834:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000836:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000838:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 800083a:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800083c:	421a      	tst	r2, r3
 800083e:	d104      	bne.n	800084a <HAL_RCC_OscConfig+0x2d2>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000840:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000842:	4313      	orrs	r3, r2
 8000844:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8000846:	2301      	movs	r3, #1
 8000848:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800084a:	2280      	movs	r2, #128	; 0x80
 800084c:	4f19      	ldr	r7, [pc, #100]	; (80008b4 <HAL_RCC_OscConfig+0x33c>)
 800084e:	0052      	lsls	r2, r2, #1
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	4213      	tst	r3, r2
 8000854:	d008      	beq.n	8000868 <HAL_RCC_OscConfig+0x2f0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000856:	2280      	movs	r2, #128	; 0x80
 8000858:	68ab      	ldr	r3, [r5, #8]
 800085a:	0052      	lsls	r2, r2, #1
 800085c:	4293      	cmp	r3, r2
 800085e:	d12b      	bne.n	80008b8 <HAL_RCC_OscConfig+0x340>
 8000860:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000862:	4313      	orrs	r3, r2
 8000864:	6523      	str	r3, [r4, #80]	; 0x50
 8000866:	e04c      	b.n	8000902 <HAL_RCC_OscConfig+0x38a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000868:	2280      	movs	r2, #128	; 0x80
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	0052      	lsls	r2, r2, #1
 800086e:	4313      	orrs	r3, r2
 8000870:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000872:	f7ff fd09 	bl	8000288 <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000876:	2380      	movs	r3, #128	; 0x80
 8000878:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 800087a:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800087c:	9303      	str	r3, [sp, #12]
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	9a03      	ldr	r2, [sp, #12]
 8000882:	4213      	tst	r3, r2
 8000884:	d1e7      	bne.n	8000856 <HAL_RCC_OscConfig+0x2de>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000886:	f7ff fcff 	bl	8000288 <HAL_GetTick>
 800088a:	9b02      	ldr	r3, [sp, #8]
 800088c:	1ac0      	subs	r0, r0, r3
 800088e:	2864      	cmp	r0, #100	; 0x64
 8000890:	d9f5      	bls.n	800087e <HAL_RCC_OscConfig+0x306>
 8000892:	e6e8      	b.n	8000666 <HAL_RCC_OscConfig+0xee>
 8000894:	40021000 	.word	0x40021000
 8000898:	ffff1fff 	.word	0xffff1fff
 800089c:	08000e6c 	.word	0x08000e6c
 80008a0:	20000000 	.word	0x20000000
 80008a4:	fffeffff 	.word	0xfffeffff
 80008a8:	fffbffff 	.word	0xfffbffff
 80008ac:	ffffe0ff 	.word	0xffffe0ff
 80008b0:	fffffeff 	.word	0xfffffeff
 80008b4:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d116      	bne.n	80008ea <HAL_RCC_OscConfig+0x372>
 80008bc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80008be:	4a6a      	ldr	r2, [pc, #424]	; (8000a68 <HAL_RCC_OscConfig+0x4f0>)
 80008c0:	4013      	ands	r3, r2
 80008c2:	6523      	str	r3, [r4, #80]	; 0x50
 80008c4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80008c6:	4a69      	ldr	r2, [pc, #420]	; (8000a6c <HAL_RCC_OscConfig+0x4f4>)
 80008c8:	4013      	ands	r3, r2
 80008ca:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80008cc:	f7ff fcdc 	bl	8000288 <HAL_GetTick>
 80008d0:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80008d2:	2280      	movs	r2, #128	; 0x80
 80008d4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80008d6:	0092      	lsls	r2, r2, #2
 80008d8:	4213      	tst	r3, r2
 80008da:	d02a      	beq.n	8000932 <HAL_RCC_OscConfig+0x3ba>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008dc:	f7ff fcd4 	bl	8000288 <HAL_GetTick>
 80008e0:	4b63      	ldr	r3, [pc, #396]	; (8000a70 <HAL_RCC_OscConfig+0x4f8>)
 80008e2:	1bc0      	subs	r0, r0, r7
 80008e4:	4298      	cmp	r0, r3
 80008e6:	d9f4      	bls.n	80008d2 <HAL_RCC_OscConfig+0x35a>
 80008e8:	e6bd      	b.n	8000666 <HAL_RCC_OscConfig+0xee>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008ea:	21a0      	movs	r1, #160	; 0xa0
 80008ec:	00c9      	lsls	r1, r1, #3
 80008ee:	428b      	cmp	r3, r1
 80008f0:	d10b      	bne.n	800090a <HAL_RCC_OscConfig+0x392>
 80008f2:	2380      	movs	r3, #128	; 0x80
 80008f4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80008f6:	00db      	lsls	r3, r3, #3
 80008f8:	430b      	orrs	r3, r1
 80008fa:	6523      	str	r3, [r4, #80]	; 0x50
 80008fc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80008fe:	431a      	orrs	r2, r3
 8000900:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000902:	f7ff fcc1 	bl	8000288 <HAL_GetTick>
 8000906:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000908:	e00e      	b.n	8000928 <HAL_RCC_OscConfig+0x3b0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800090a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800090c:	4a56      	ldr	r2, [pc, #344]	; (8000a68 <HAL_RCC_OscConfig+0x4f0>)
 800090e:	4013      	ands	r3, r2
 8000910:	6523      	str	r3, [r4, #80]	; 0x50
 8000912:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000914:	4a55      	ldr	r2, [pc, #340]	; (8000a6c <HAL_RCC_OscConfig+0x4f4>)
 8000916:	4013      	ands	r3, r2
 8000918:	e7a4      	b.n	8000864 <HAL_RCC_OscConfig+0x2ec>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800091a:	f7ff fcb5 	bl	8000288 <HAL_GetTick>
 800091e:	4b54      	ldr	r3, [pc, #336]	; (8000a70 <HAL_RCC_OscConfig+0x4f8>)
 8000920:	1bc0      	subs	r0, r0, r7
 8000922:	4298      	cmp	r0, r3
 8000924:	d900      	bls.n	8000928 <HAL_RCC_OscConfig+0x3b0>
 8000926:	e69e      	b.n	8000666 <HAL_RCC_OscConfig+0xee>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000928:	2280      	movs	r2, #128	; 0x80
 800092a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800092c:	0092      	lsls	r2, r2, #2
 800092e:	4213      	tst	r3, r2
 8000930:	d0f3      	beq.n	800091a <HAL_RCC_OscConfig+0x3a2>
    if(pwrclkchanged == SET)
 8000932:	9b01      	ldr	r3, [sp, #4]
 8000934:	2b01      	cmp	r3, #1
 8000936:	d000      	beq.n	800093a <HAL_RCC_OscConfig+0x3c2>
 8000938:	e66a      	b.n	8000610 <HAL_RCC_OscConfig+0x98>
      __HAL_RCC_PWR_CLK_DISABLE();
 800093a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800093c:	4a4d      	ldr	r2, [pc, #308]	; (8000a74 <HAL_RCC_OscConfig+0x4fc>)
 800093e:	4013      	ands	r3, r2
 8000940:	63a3      	str	r3, [r4, #56]	; 0x38
 8000942:	e665      	b.n	8000610 <HAL_RCC_OscConfig+0x98>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000944:	69a9      	ldr	r1, [r5, #24]
 8000946:	2301      	movs	r3, #1
 8000948:	4a4b      	ldr	r2, [pc, #300]	; (8000a78 <HAL_RCC_OscConfig+0x500>)
 800094a:	2900      	cmp	r1, #0
 800094c:	d018      	beq.n	8000980 <HAL_RCC_OscConfig+0x408>
        __HAL_RCC_HSI48_ENABLE();
 800094e:	68a1      	ldr	r1, [r4, #8]
 8000950:	4319      	orrs	r1, r3
 8000952:	60a1      	str	r1, [r4, #8]
 8000954:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000956:	430b      	orrs	r3, r1
 8000958:	6363      	str	r3, [r4, #52]	; 0x34
 800095a:	2380      	movs	r3, #128	; 0x80
 800095c:	6a11      	ldr	r1, [r2, #32]
 800095e:	019b      	lsls	r3, r3, #6
 8000960:	430b      	orrs	r3, r1
 8000962:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8000964:	f7ff fc90 	bl	8000288 <HAL_GetTick>
 8000968:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800096a:	2202      	movs	r2, #2
 800096c:	68a3      	ldr	r3, [r4, #8]
 800096e:	4213      	tst	r3, r2
 8000970:	d000      	beq.n	8000974 <HAL_RCC_OscConfig+0x3fc>
 8000972:	e651      	b.n	8000618 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000974:	f7ff fc88 	bl	8000288 <HAL_GetTick>
 8000978:	1bc0      	subs	r0, r0, r7
 800097a:	2802      	cmp	r0, #2
 800097c:	d9f5      	bls.n	800096a <HAL_RCC_OscConfig+0x3f2>
 800097e:	e672      	b.n	8000666 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI48_DISABLE();
 8000980:	68a1      	ldr	r1, [r4, #8]
 8000982:	4399      	bics	r1, r3
 8000984:	60a1      	str	r1, [r4, #8]
 8000986:	6a13      	ldr	r3, [r2, #32]
 8000988:	493c      	ldr	r1, [pc, #240]	; (8000a7c <HAL_RCC_OscConfig+0x504>)
 800098a:	400b      	ands	r3, r1
 800098c:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 800098e:	f7ff fc7b 	bl	8000288 <HAL_GetTick>
 8000992:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000994:	2202      	movs	r2, #2
 8000996:	68a3      	ldr	r3, [r4, #8]
 8000998:	4213      	tst	r3, r2
 800099a:	d100      	bne.n	800099e <HAL_RCC_OscConfig+0x426>
 800099c:	e63c      	b.n	8000618 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800099e:	f7ff fc73 	bl	8000288 <HAL_GetTick>
 80009a2:	1bc0      	subs	r0, r0, r7
 80009a4:	2802      	cmp	r0, #2
 80009a6:	d9f5      	bls.n	8000994 <HAL_RCC_OscConfig+0x41c>
 80009a8:	e65d      	b.n	8000666 <HAL_RCC_OscConfig+0xee>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80009aa:	2e0c      	cmp	r6, #12
 80009ac:	d043      	beq.n	8000a36 <HAL_RCC_OscConfig+0x4be>
 80009ae:	4a34      	ldr	r2, [pc, #208]	; (8000a80 <HAL_RCC_OscConfig+0x508>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80009b0:	2b02      	cmp	r3, #2
 80009b2:	d12e      	bne.n	8000a12 <HAL_RCC_OscConfig+0x49a>
        __HAL_RCC_PLL_DISABLE();
 80009b4:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80009b6:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80009b8:	4013      	ands	r3, r2
 80009ba:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80009bc:	f7ff fc64 	bl	8000288 <HAL_GetTick>
 80009c0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80009c2:	04b6      	lsls	r6, r6, #18
 80009c4:	6823      	ldr	r3, [r4, #0]
 80009c6:	4233      	tst	r3, r6
 80009c8:	d11d      	bne.n	8000a06 <HAL_RCC_OscConfig+0x48e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80009ca:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80009cc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80009ce:	68e2      	ldr	r2, [r4, #12]
 80009d0:	430b      	orrs	r3, r1
 80009d2:	492c      	ldr	r1, [pc, #176]	; (8000a84 <HAL_RCC_OscConfig+0x50c>)
 80009d4:	400a      	ands	r2, r1
 80009d6:	4313      	orrs	r3, r2
 80009d8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80009da:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80009dc:	4313      	orrs	r3, r2
 80009de:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80009e0:	2380      	movs	r3, #128	; 0x80
 80009e2:	6822      	ldr	r2, [r4, #0]
 80009e4:	045b      	lsls	r3, r3, #17
 80009e6:	4313      	orrs	r3, r2
 80009e8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80009ea:	f7ff fc4d 	bl	8000288 <HAL_GetTick>
 80009ee:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80009f0:	04ad      	lsls	r5, r5, #18
 80009f2:	6823      	ldr	r3, [r4, #0]
 80009f4:	422b      	tst	r3, r5
 80009f6:	d000      	beq.n	80009fa <HAL_RCC_OscConfig+0x482>
 80009f8:	e612      	b.n	8000620 <HAL_RCC_OscConfig+0xa8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009fa:	f7ff fc45 	bl	8000288 <HAL_GetTick>
 80009fe:	1b80      	subs	r0, r0, r6
 8000a00:	2802      	cmp	r0, #2
 8000a02:	d9f6      	bls.n	80009f2 <HAL_RCC_OscConfig+0x47a>
 8000a04:	e62f      	b.n	8000666 <HAL_RCC_OscConfig+0xee>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a06:	f7ff fc3f 	bl	8000288 <HAL_GetTick>
 8000a0a:	1bc0      	subs	r0, r0, r7
 8000a0c:	2802      	cmp	r0, #2
 8000a0e:	d9d9      	bls.n	80009c4 <HAL_RCC_OscConfig+0x44c>
 8000a10:	e629      	b.n	8000666 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_PLL_DISABLE();
 8000a12:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000a14:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8000a16:	4013      	ands	r3, r2
 8000a18:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000a1a:	f7ff fc35 	bl	8000288 <HAL_GetTick>
 8000a1e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000a20:	04ad      	lsls	r5, r5, #18
 8000a22:	6823      	ldr	r3, [r4, #0]
 8000a24:	422b      	tst	r3, r5
 8000a26:	d100      	bne.n	8000a2a <HAL_RCC_OscConfig+0x4b2>
 8000a28:	e5fa      	b.n	8000620 <HAL_RCC_OscConfig+0xa8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a2a:	f7ff fc2d 	bl	8000288 <HAL_GetTick>
 8000a2e:	1b80      	subs	r0, r0, r6
 8000a30:	2802      	cmp	r0, #2
 8000a32:	d9f6      	bls.n	8000a22 <HAL_RCC_OscConfig+0x4aa>
 8000a34:	e617      	b.n	8000666 <HAL_RCC_OscConfig+0xee>
      if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000a36:	2280      	movs	r2, #128	; 0x80
      pll_config = RCC->CFGR;
 8000a38:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000a3a:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8000a3c:	0252      	lsls	r2, r2, #9
 8000a3e:	401a      	ands	r2, r3
        return HAL_ERROR;
 8000a40:	2001      	movs	r0, #1
      if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000a42:	428a      	cmp	r2, r1
 8000a44:	d000      	beq.n	8000a48 <HAL_RCC_OscConfig+0x4d0>
 8000a46:	e59d      	b.n	8000584 <HAL_RCC_OscConfig+0xc>
         (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000a48:	22f0      	movs	r2, #240	; 0xf0
      if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000a4a:	6b29      	ldr	r1, [r5, #48]	; 0x30
         (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000a4c:	0392      	lsls	r2, r2, #14
 8000a4e:	401a      	ands	r2, r3
      if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000a50:	428a      	cmp	r2, r1
 8000a52:	d000      	beq.n	8000a56 <HAL_RCC_OscConfig+0x4de>
 8000a54:	e596      	b.n	8000584 <HAL_RCC_OscConfig+0xc>
         (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8000a56:	20c0      	movs	r0, #192	; 0xc0
 8000a58:	0400      	lsls	r0, r0, #16
 8000a5a:	4003      	ands	r3, r0
         (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000a5c:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8000a5e:	1a18      	subs	r0, r3, r0
 8000a60:	1e43      	subs	r3, r0, #1
 8000a62:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8000a64:	b2c0      	uxtb	r0, r0
 8000a66:	e58d      	b.n	8000584 <HAL_RCC_OscConfig+0xc>
 8000a68:	fffffeff 	.word	0xfffffeff
 8000a6c:	fffffbff 	.word	0xfffffbff
 8000a70:	00001388 	.word	0x00001388
 8000a74:	efffffff 	.word	0xefffffff
 8000a78:	40010000 	.word	0x40010000
 8000a7c:	ffffdfff 	.word	0xffffdfff
 8000a80:	feffffff 	.word	0xfeffffff
 8000a84:	ff02ffff 	.word	0xff02ffff

08000a88 <HAL_RCC_ClockConfig>:
{
 8000a88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000a8a:	1e06      	subs	r6, r0, #0
 8000a8c:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8000a8e:	d101      	bne.n	8000a94 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8000a90:	2001      	movs	r0, #1
}
 8000a92:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000a94:	2201      	movs	r2, #1
 8000a96:	4c51      	ldr	r4, [pc, #324]	; (8000bdc <HAL_RCC_ClockConfig+0x154>)
 8000a98:	9901      	ldr	r1, [sp, #4]
 8000a9a:	6823      	ldr	r3, [r4, #0]
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	428b      	cmp	r3, r1
 8000aa0:	d327      	bcc.n	8000af2 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000aa2:	6832      	ldr	r2, [r6, #0]
 8000aa4:	0793      	lsls	r3, r2, #30
 8000aa6:	d42f      	bmi.n	8000b08 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000aa8:	07d3      	lsls	r3, r2, #31
 8000aaa:	d435      	bmi.n	8000b18 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000aac:	2301      	movs	r3, #1
 8000aae:	6822      	ldr	r2, [r4, #0]
 8000ab0:	9901      	ldr	r1, [sp, #4]
 8000ab2:	401a      	ands	r2, r3
 8000ab4:	4291      	cmp	r1, r2
 8000ab6:	d200      	bcs.n	8000aba <HAL_RCC_ClockConfig+0x32>
 8000ab8:	e081      	b.n	8000bbe <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000aba:	6832      	ldr	r2, [r6, #0]
 8000abc:	4c48      	ldr	r4, [pc, #288]	; (8000be0 <HAL_RCC_ClockConfig+0x158>)
 8000abe:	0753      	lsls	r3, r2, #29
 8000ac0:	d500      	bpl.n	8000ac4 <HAL_RCC_ClockConfig+0x3c>
 8000ac2:	e084      	b.n	8000bce <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ac4:	0713      	lsls	r3, r2, #28
 8000ac6:	d506      	bpl.n	8000ad6 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000ac8:	68e2      	ldr	r2, [r4, #12]
 8000aca:	6933      	ldr	r3, [r6, #16]
 8000acc:	4945      	ldr	r1, [pc, #276]	; (8000be4 <HAL_RCC_ClockConfig+0x15c>)
 8000ace:	00db      	lsls	r3, r3, #3
 8000ad0:	400a      	ands	r2, r1
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	60e3      	str	r3, [r4, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000ad6:	f7ff fd13 	bl	8000500 <HAL_RCC_GetSysClockFreq>
 8000ada:	68e3      	ldr	r3, [r4, #12]
 8000adc:	4a42      	ldr	r2, [pc, #264]	; (8000be8 <HAL_RCC_ClockConfig+0x160>)
 8000ade:	061b      	lsls	r3, r3, #24
 8000ae0:	0f1b      	lsrs	r3, r3, #28
 8000ae2:	5cd3      	ldrb	r3, [r2, r3]
 8000ae4:	40d8      	lsrs	r0, r3
 8000ae6:	4b41      	ldr	r3, [pc, #260]	; (8000bec <HAL_RCC_ClockConfig+0x164>)
 8000ae8:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8000aea:	2000      	movs	r0, #0
 8000aec:	f7ff fb98 	bl	8000220 <HAL_InitTick>
 8000af0:	e7cf      	b.n	8000a92 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000af2:	6823      	ldr	r3, [r4, #0]
 8000af4:	9901      	ldr	r1, [sp, #4]
 8000af6:	4393      	bics	r3, r2
 8000af8:	430b      	orrs	r3, r1
 8000afa:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000afc:	6823      	ldr	r3, [r4, #0]
 8000afe:	4013      	ands	r3, r2
 8000b00:	9a01      	ldr	r2, [sp, #4]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d1c4      	bne.n	8000a90 <HAL_RCC_ClockConfig+0x8>
 8000b06:	e7cc      	b.n	8000aa2 <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000b08:	20f0      	movs	r0, #240	; 0xf0
 8000b0a:	4935      	ldr	r1, [pc, #212]	; (8000be0 <HAL_RCC_ClockConfig+0x158>)
 8000b0c:	68cb      	ldr	r3, [r1, #12]
 8000b0e:	4383      	bics	r3, r0
 8000b10:	68b0      	ldr	r0, [r6, #8]
 8000b12:	4303      	orrs	r3, r0
 8000b14:	60cb      	str	r3, [r1, #12]
 8000b16:	e7c7      	b.n	8000aa8 <HAL_RCC_ClockConfig+0x20>
 8000b18:	4d31      	ldr	r5, [pc, #196]	; (8000be0 <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b1a:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000b1c:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b1e:	2a02      	cmp	r2, #2
 8000b20:	d119      	bne.n	8000b56 <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000b22:	039b      	lsls	r3, r3, #14
 8000b24:	d5b4      	bpl.n	8000a90 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000b26:	2103      	movs	r1, #3
 8000b28:	68eb      	ldr	r3, [r5, #12]
 8000b2a:	438b      	bics	r3, r1
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8000b30:	f7ff fbaa 	bl	8000288 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b34:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000b36:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b38:	2b02      	cmp	r3, #2
 8000b3a:	d119      	bne.n	8000b70 <HAL_RCC_ClockConfig+0xe8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b3c:	220c      	movs	r2, #12
 8000b3e:	68eb      	ldr	r3, [r5, #12]
 8000b40:	4013      	ands	r3, r2
 8000b42:	2b08      	cmp	r3, #8
 8000b44:	d0b2      	beq.n	8000aac <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b46:	f7ff fb9f 	bl	8000288 <HAL_GetTick>
 8000b4a:	4b29      	ldr	r3, [pc, #164]	; (8000bf0 <HAL_RCC_ClockConfig+0x168>)
 8000b4c:	1bc0      	subs	r0, r0, r7
 8000b4e:	4298      	cmp	r0, r3
 8000b50:	d9f4      	bls.n	8000b3c <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 8000b52:	2003      	movs	r0, #3
 8000b54:	e79d      	b.n	8000a92 <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b56:	2a03      	cmp	r2, #3
 8000b58:	d102      	bne.n	8000b60 <HAL_RCC_ClockConfig+0xd8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000b5a:	019b      	lsls	r3, r3, #6
 8000b5c:	d4e3      	bmi.n	8000b26 <HAL_RCC_ClockConfig+0x9e>
 8000b5e:	e797      	b.n	8000a90 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000b60:	2a01      	cmp	r2, #1
 8000b62:	d102      	bne.n	8000b6a <HAL_RCC_ClockConfig+0xe2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000b64:	075b      	lsls	r3, r3, #29
 8000b66:	d4de      	bmi.n	8000b26 <HAL_RCC_ClockConfig+0x9e>
 8000b68:	e792      	b.n	8000a90 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000b6a:	059b      	lsls	r3, r3, #22
 8000b6c:	d4db      	bmi.n	8000b26 <HAL_RCC_ClockConfig+0x9e>
 8000b6e:	e78f      	b.n	8000a90 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b70:	2b03      	cmp	r3, #3
 8000b72:	d10b      	bne.n	8000b8c <HAL_RCC_ClockConfig+0x104>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b74:	220c      	movs	r2, #12
 8000b76:	68eb      	ldr	r3, [r5, #12]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d096      	beq.n	8000aac <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b7e:	f7ff fb83 	bl	8000288 <HAL_GetTick>
 8000b82:	4b1b      	ldr	r3, [pc, #108]	; (8000bf0 <HAL_RCC_ClockConfig+0x168>)
 8000b84:	1bc0      	subs	r0, r0, r7
 8000b86:	4298      	cmp	r0, r3
 8000b88:	d9f4      	bls.n	8000b74 <HAL_RCC_ClockConfig+0xec>
 8000b8a:	e7e2      	b.n	8000b52 <HAL_RCC_ClockConfig+0xca>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d010      	beq.n	8000bb2 <HAL_RCC_ClockConfig+0x12a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8000b90:	220c      	movs	r2, #12
 8000b92:	68eb      	ldr	r3, [r5, #12]
 8000b94:	4213      	tst	r3, r2
 8000b96:	d089      	beq.n	8000aac <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b98:	f7ff fb76 	bl	8000288 <HAL_GetTick>
 8000b9c:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <HAL_RCC_ClockConfig+0x168>)
 8000b9e:	1bc0      	subs	r0, r0, r7
 8000ba0:	4298      	cmp	r0, r3
 8000ba2:	d9f5      	bls.n	8000b90 <HAL_RCC_ClockConfig+0x108>
 8000ba4:	e7d5      	b.n	8000b52 <HAL_RCC_ClockConfig+0xca>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ba6:	f7ff fb6f 	bl	8000288 <HAL_GetTick>
 8000baa:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <HAL_RCC_ClockConfig+0x168>)
 8000bac:	1bc0      	subs	r0, r0, r7
 8000bae:	4298      	cmp	r0, r3
 8000bb0:	d8cf      	bhi.n	8000b52 <HAL_RCC_ClockConfig+0xca>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000bb2:	220c      	movs	r2, #12
 8000bb4:	68eb      	ldr	r3, [r5, #12]
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	2b04      	cmp	r3, #4
 8000bba:	d1f4      	bne.n	8000ba6 <HAL_RCC_ClockConfig+0x11e>
 8000bbc:	e776      	b.n	8000aac <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bbe:	6822      	ldr	r2, [r4, #0]
 8000bc0:	439a      	bics	r2, r3
 8000bc2:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000bc4:	6822      	ldr	r2, [r4, #0]
 8000bc6:	421a      	tst	r2, r3
 8000bc8:	d000      	beq.n	8000bcc <HAL_RCC_ClockConfig+0x144>
 8000bca:	e761      	b.n	8000a90 <HAL_RCC_ClockConfig+0x8>
 8000bcc:	e775      	b.n	8000aba <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000bce:	68e3      	ldr	r3, [r4, #12]
 8000bd0:	4908      	ldr	r1, [pc, #32]	; (8000bf4 <HAL_RCC_ClockConfig+0x16c>)
 8000bd2:	400b      	ands	r3, r1
 8000bd4:	68f1      	ldr	r1, [r6, #12]
 8000bd6:	430b      	orrs	r3, r1
 8000bd8:	60e3      	str	r3, [r4, #12]
 8000bda:	e773      	b.n	8000ac4 <HAL_RCC_ClockConfig+0x3c>
 8000bdc:	40022000 	.word	0x40022000
 8000be0:	40021000 	.word	0x40021000
 8000be4:	ffffc7ff 	.word	0xffffc7ff
 8000be8:	08000e6c 	.word	0x08000e6c
 8000bec:	20000000 	.word	0x20000000
 8000bf0:	00001388 	.word	0x00001388
 8000bf4:	fffff8ff 	.word	0xfffff8ff

08000bf8 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  if(GPIO_Pin == USER_KEY_Pin)
 8000bf8:	2380      	movs	r3, #128	; 0x80
{
 8000bfa:	b510      	push	{r4, lr}
  if(GPIO_Pin == USER_KEY_Pin)
 8000bfc:	019b      	lsls	r3, r3, #6
 8000bfe:	4298      	cmp	r0, r3
 8000c00:	d108      	bne.n	8000c14 <HAL_GPIO_EXTI_Callback+0x1c>
  {
    HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
 8000c02:	20a0      	movs	r0, #160	; 0xa0
 8000c04:	2120      	movs	r1, #32
 8000c06:	05c0      	lsls	r0, r0, #23
 8000c08:	f7ff fc6a 	bl	80004e0 <HAL_GPIO_TogglePin>
    HAL_Delay(1000);
 8000c0c:	20fa      	movs	r0, #250	; 0xfa
 8000c0e:	0080      	lsls	r0, r0, #2
 8000c10:	f7ff fb40 	bl	8000294 <HAL_Delay>
  }
}
 8000c14:	bd10      	pop	{r4, pc}
	...

08000c18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c18:	b530      	push	{r4, r5, lr}
 8000c1a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c1c:	2238      	movs	r2, #56	; 0x38
 8000c1e:	2100      	movs	r1, #0
 8000c20:	a806      	add	r0, sp, #24
 8000c22:	f000 f90f 	bl	8000e44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c26:	2214      	movs	r2, #20
 8000c28:	2100      	movs	r1, #0
 8000c2a:	a801      	add	r0, sp, #4
 8000c2c:	f000 f90a 	bl	8000e44 <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c30:	4913      	ldr	r1, [pc, #76]	; (8000c80 <SystemClock_Config+0x68>)
 8000c32:	4a14      	ldr	r2, [pc, #80]	; (8000c84 <SystemClock_Config+0x6c>)
 8000c34:	680b      	ldr	r3, [r1, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c36:	2400      	movs	r4, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c38:	401a      	ands	r2, r3
 8000c3a:	2380      	movs	r3, #128	; 0x80
 8000c3c:	011b      	lsls	r3, r3, #4
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c42:	2302      	movs	r3, #2
 8000c44:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c46:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000c48:	2380      	movs	r3, #128	; 0x80
 8000c4a:	02db      	lsls	r3, r3, #11
 8000c4c:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000c4e:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c50:	2210      	movs	r2, #16
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c52:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000c54:	03db      	lsls	r3, r3, #15
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c56:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c58:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000c5a:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c5c:	9509      	str	r5, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c5e:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c60:	f7ff fc8a 	bl	8000578 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c64:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c66:	0029      	movs	r1, r5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c68:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c6a:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c6c:	3b0c      	subs	r3, #12
 8000c6e:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c70:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c72:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c74:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c76:	f7ff ff07 	bl	8000a88 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8000c7a:	b015      	add	sp, #84	; 0x54
 8000c7c:	bd30      	pop	{r4, r5, pc}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	40007000 	.word	0x40007000
 8000c84:	ffffe7ff 	.word	0xffffe7ff

08000c88 <main>:
{
 8000c88:	b530      	push	{r4, r5, lr}
 8000c8a:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8000c8c:	f7ff fae0 	bl	8000250 <HAL_Init>
  SystemClock_Config();
 8000c90:	f7ff ffc2 	bl	8000c18 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	2214      	movs	r2, #20
 8000c96:	2100      	movs	r1, #0
 8000c98:	a803      	add	r0, sp, #12
 8000c9a:	f000 f8d3 	bl	8000e44 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c9e:	2004      	movs	r0, #4
 8000ca0:	4b19      	ldr	r3, [pc, #100]	; (8000d08 <main+0x80>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca2:	2401      	movs	r4, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_KEY_Pin */
  GPIO_InitStruct.Pin = USER_KEY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2500      	movs	r5, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca8:	4301      	orrs	r1, r0
 8000caa:	62d9      	str	r1, [r3, #44]	; 0x2c
 8000cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8000cae:	2120      	movs	r1, #32
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb0:	4002      	ands	r2, r0
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8000cb2:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb4:	9201      	str	r2, [sp, #4]
 8000cb6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8000cba:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbc:	4322      	orrs	r2, r4
 8000cbe:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8000cc2:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc4:	4023      	ands	r3, r4
 8000cc6:	9302      	str	r3, [sp, #8]
 8000cc8:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8000cca:	f7ff fc03 	bl	80004d4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = USER_KEY_Pin;
 8000cce:	2380      	movs	r3, #128	; 0x80
 8000cd0:	019b      	lsls	r3, r3, #6
 8000cd2:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cd4:	4b0d      	ldr	r3, [pc, #52]	; (8000d0c <main+0x84>)
  HAL_GPIO_Init(USER_KEY_GPIO_Port, &GPIO_InitStruct);
 8000cd6:	a903      	add	r1, sp, #12
 8000cd8:	480d      	ldr	r0, [pc, #52]	; (8000d10 <main+0x88>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cda:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(USER_KEY_GPIO_Port, &GPIO_InitStruct);
 8000cde:	f7ff fb3d 	bl	800035c <HAL_GPIO_Init>
  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 8000ce2:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 8000ce4:	2320      	movs	r3, #32
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 8000ce6:	a903      	add	r1, sp, #12
 8000ce8:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 8000cea:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cec:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000cf0:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 8000cf2:	f7ff fb33 	bl	800035c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 8000cf6:	2007      	movs	r0, #7
 8000cf8:	002a      	movs	r2, r5
 8000cfa:	0021      	movs	r1, r4
 8000cfc:	f7ff fada 	bl	80002b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000d00:	2007      	movs	r0, #7
 8000d02:	f7ff fb07 	bl	8000314 <HAL_NVIC_EnableIRQ>
 8000d06:	e7fe      	b.n	8000d06 <main+0x7e>
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	10210000 	.word	0x10210000
 8000d10:	50000800 	.word	0x50000800

08000d14 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d14:	2201      	movs	r2, #1
 8000d16:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <HAL_MspInit+0x18>)
 8000d18:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d1a:	430a      	orrs	r2, r1
 8000d1c:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1e:	2280      	movs	r2, #128	; 0x80
 8000d20:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000d22:	0552      	lsls	r2, r2, #21
 8000d24:	430a      	orrs	r2, r1
 8000d26:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d28:	4770      	bx	lr
 8000d2a:	46c0      	nop			; (mov r8, r8)
 8000d2c:	40021000 	.word	0x40021000

08000d30 <NMI_Handler>:
 8000d30:	4770      	bx	lr

08000d32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d32:	e7fe      	b.n	8000d32 <HardFault_Handler>

08000d34 <SVC_Handler>:
 8000d34:	4770      	bx	lr

08000d36 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d36:	4770      	bx	lr

08000d38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d38:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d3a:	f7ff fa9d 	bl	8000278 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d3e:	bd10      	pop	{r4, pc}

08000d40 <EXTI4_15_IRQHandler>:
void EXTI4_15_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000d40:	2080      	movs	r0, #128	; 0x80
{
 8000d42:	b510      	push	{r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000d44:	0180      	lsls	r0, r0, #6
 8000d46:	f7ff fbcf 	bl	80004e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000d4a:	bd10      	pop	{r4, pc}

08000d4c <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8000d4c:	2280      	movs	r2, #128	; 0x80
 8000d4e:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <SystemInit+0x44>)
 8000d50:	0052      	lsls	r2, r2, #1
 8000d52:	6819      	ldr	r1, [r3, #0]
 8000d54:	430a      	orrs	r2, r1
 8000d56:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8000d58:	68da      	ldr	r2, [r3, #12]
 8000d5a:	490e      	ldr	r1, [pc, #56]	; (8000d94 <SystemInit+0x48>)
 8000d5c:	400a      	ands	r2, r1
 8000d5e:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	490d      	ldr	r1, [pc, #52]	; (8000d98 <SystemInit+0x4c>)
 8000d64:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000d66:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000d68:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000d6a:	689a      	ldr	r2, [r3, #8]
 8000d6c:	438a      	bics	r2, r1
 8000d6e:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	490a      	ldr	r1, [pc, #40]	; (8000d9c <SystemInit+0x50>)
 8000d74:	400a      	ands	r2, r1
 8000d76:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8000d78:	68da      	ldr	r2, [r3, #12]
 8000d7a:	4909      	ldr	r1, [pc, #36]	; (8000da0 <SystemInit+0x54>)
 8000d7c:	400a      	ands	r2, r1
 8000d7e:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000d80:	2200      	movs	r2, #0
 8000d82:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d84:	2280      	movs	r2, #128	; 0x80
 8000d86:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <SystemInit+0x58>)
 8000d88:	0512      	lsls	r2, r2, #20
 8000d8a:	609a      	str	r2, [r3, #8]
#endif
}
 8000d8c:	4770      	bx	lr
 8000d8e:	46c0      	nop			; (mov r8, r8)
 8000d90:	40021000 	.word	0x40021000
 8000d94:	88ff400c 	.word	0x88ff400c
 8000d98:	fef6fff6 	.word	0xfef6fff6
 8000d9c:	fffbffff 	.word	0xfffbffff
 8000da0:	ff02ffff 	.word	0xff02ffff
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000da8:	480d      	ldr	r0, [pc, #52]	; (8000de0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000daa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000dac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000dae:	e003      	b.n	8000db8 <LoopCopyDataInit>

08000db0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8000db2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000db4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000db6:	3104      	adds	r1, #4

08000db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000db8:	480b      	ldr	r0, [pc, #44]	; (8000de8 <LoopForever+0xa>)
  ldr  r3, =_edata
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <LoopForever+0xe>)
  adds  r2, r0, r1
 8000dbc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000dbe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000dc0:	d3f6      	bcc.n	8000db0 <CopyDataInit>
  ldr  r2, =_sbss
 8000dc2:	4a0b      	ldr	r2, [pc, #44]	; (8000df0 <LoopForever+0x12>)
  b  LoopFillZerobss
 8000dc4:	e002      	b.n	8000dcc <LoopFillZerobss>

08000dc6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000dc6:	2300      	movs	r3, #0
  str  r3, [r2]
 8000dc8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dca:	3204      	adds	r2, #4

08000dcc <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8000dcc:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <LoopForever+0x16>)
  cmp  r2, r3
 8000dce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000dd0:	d3f9      	bcc.n	8000dc6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000dd2:	f7ff ffbb 	bl	8000d4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dd6:	f000 f811 	bl	8000dfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dda:	f7ff ff55 	bl	8000c88 <main>

08000dde <LoopForever>:

LoopForever:
    b LoopForever
 8000dde:	e7fe      	b.n	8000dde <LoopForever>
   ldr   r0, =_estack
 8000de0:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8000de4:	08000e90 	.word	0x08000e90
  ldr  r0, =_sdata
 8000de8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000dec:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8000df0:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8000df4:	20000024 	.word	0x20000024

08000df8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df8:	e7fe      	b.n	8000df8 <ADC1_COMP_IRQHandler>
	...

08000dfc <__libc_init_array>:
 8000dfc:	b570      	push	{r4, r5, r6, lr}
 8000dfe:	2600      	movs	r6, #0
 8000e00:	4d0c      	ldr	r5, [pc, #48]	; (8000e34 <__libc_init_array+0x38>)
 8000e02:	4c0d      	ldr	r4, [pc, #52]	; (8000e38 <__libc_init_array+0x3c>)
 8000e04:	1b64      	subs	r4, r4, r5
 8000e06:	10a4      	asrs	r4, r4, #2
 8000e08:	42a6      	cmp	r6, r4
 8000e0a:	d109      	bne.n	8000e20 <__libc_init_array+0x24>
 8000e0c:	2600      	movs	r6, #0
 8000e0e:	f000 f821 	bl	8000e54 <_init>
 8000e12:	4d0a      	ldr	r5, [pc, #40]	; (8000e3c <__libc_init_array+0x40>)
 8000e14:	4c0a      	ldr	r4, [pc, #40]	; (8000e40 <__libc_init_array+0x44>)
 8000e16:	1b64      	subs	r4, r4, r5
 8000e18:	10a4      	asrs	r4, r4, #2
 8000e1a:	42a6      	cmp	r6, r4
 8000e1c:	d105      	bne.n	8000e2a <__libc_init_array+0x2e>
 8000e1e:	bd70      	pop	{r4, r5, r6, pc}
 8000e20:	00b3      	lsls	r3, r6, #2
 8000e22:	58eb      	ldr	r3, [r5, r3]
 8000e24:	4798      	blx	r3
 8000e26:	3601      	adds	r6, #1
 8000e28:	e7ee      	b.n	8000e08 <__libc_init_array+0xc>
 8000e2a:	00b3      	lsls	r3, r6, #2
 8000e2c:	58eb      	ldr	r3, [r5, r3]
 8000e2e:	4798      	blx	r3
 8000e30:	3601      	adds	r6, #1
 8000e32:	e7f2      	b.n	8000e1a <__libc_init_array+0x1e>
 8000e34:	08000e88 	.word	0x08000e88
 8000e38:	08000e88 	.word	0x08000e88
 8000e3c:	08000e88 	.word	0x08000e88
 8000e40:	08000e8c 	.word	0x08000e8c

08000e44 <memset>:
 8000e44:	0003      	movs	r3, r0
 8000e46:	1882      	adds	r2, r0, r2
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d100      	bne.n	8000e4e <memset+0xa>
 8000e4c:	4770      	bx	lr
 8000e4e:	7019      	strb	r1, [r3, #0]
 8000e50:	3301      	adds	r3, #1
 8000e52:	e7f9      	b.n	8000e48 <memset+0x4>

08000e54 <_init>:
 8000e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e56:	46c0      	nop			; (mov r8, r8)
 8000e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e5a:	bc08      	pop	{r3}
 8000e5c:	469e      	mov	lr, r3
 8000e5e:	4770      	bx	lr

08000e60 <_fini>:
 8000e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e66:	bc08      	pop	{r3}
 8000e68:	469e      	mov	lr, r3
 8000e6a:	4770      	bx	lr
